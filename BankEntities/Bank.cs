using System;
using System.Collections.Generic;
using System.Linq;

namespace BankEntities
{
    #region ConfigurationTypes
    public enum PrimaryAccountType{
        /*Primary Account Types between 1 to 1000 */
        Checking=1,
        Investment= 2
    }
    public enum SubAccountType{
        /*Secondary Account Type classification between from 1000 to 5000 */
        Individual=1000,
        Corporate= 1001
    }
       public enum TransactionType{
        /*Transaction Type starts from 5000 */
        Deposit=5000,
        Transfer= 5001,
        Withdrawl=5002
    }

    #endregion

    /* A structure to hold a Transaction Status and Info about Transaction*/
    public struct TransctionStatus
    {
        public bool _success;
        public string _info;
        public bool Success {

           get =>_success;
           set=>_success=value;

       }
       public string Info {

           get =>_info;
           set=>_info=value;

       }
    }


    public class Bank
    {
       private string _name;
       private List<Account> _accounts=new List<Account>();
       public string Name {

           get =>_name;
           set=>_name=value;

       }
       public List<Account> Accounts{
           get=>_accounts;
           set=>_accounts=value;
       }
       public Bank(string name)
       {
           Name=name;
       }

       /*Method to create account
       Unique AccountId should be autogenerated by system. For this version user will provide accountId */
       public void CreateAccount(string accountId,string ownerName,double balance, PrimaryAccountType primaryType,SubAccountType subType){
        if(primaryType==PrimaryAccountType.Investment){
        Account acc=new Account(accountId,ownerName,balance,primaryType,subType);
        Accounts.Add(acc);
        }
        else{
            Account acc=new Account(accountId,ownerName,balance,primaryType);
            Accounts.Add(acc);
        }
        
       }

      /*Method to get Account by AccountId*/
       public Account GetAccountbyId(string accountId){
         Account acc=Accounts.FirstOrDefault(o => o.AccountId == accountId);
         return acc;
       }

       /* Method to Verify the Transaction Type,Triggers the respective Transaction and returns the Transcation Status .*/
       public TransctionStatus ProcessTransaction(string accountId,Transaction transaction){
         TransctionStatus ts=new TransctionStatus();
         Account acc=GetAccountbyId(accountId);
         switch (transaction.TType)
         {
             case TransactionType.Deposit:
             return acc.DepositAmount(transaction);
           
             case TransactionType.Withdrawl:
              return acc.WithdrawlAmount(transaction);
             case TransactionType.Transfer:
              Account toAcc=GetAccountbyId(transaction.ToAccountId);
              return acc.Transfer(transaction,toAcc);
             default:
             ts.Info="Invalid Transaction Type.";
             ts.Success=false;
             return ts;
         }
        
         }
         
     
       

    
    
}
}
